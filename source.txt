Spring MVC

브라우저 =-> 모름 * 요청 Dispathcer Servlet => Handler Mapping(URL PATH가 어떤 컨트롤러에 매핑 되는지)

 => Handler Adapter에서 메서드가 실행됨.
 => 컨트롤러 매서드는 View Name를 리턴한다.
 	매서드는 알맞은 View Resolver가 View Name를 선택한다.(XML을 요청했을 경우 XML을 적용해서 전달한다.)
 => View가 생성한다.
 => 브라우저에 적용된다.

----------------------------------------------------------------------------------------------------

JSP가 View역할을 하는데, HTML을 만들어내는 기술을 다양하다. => 이것을 View Resolver가 처리를 해준다.(이것을 처리하는 Resolver가 필요하다.)

핸들러 : 컨트롤러에서 어떤 URL PATH를 처리해주는지 => 어떤 컨트롤러에 어떤 메서드가 처리하는지 => 컨트롤러의 매서드
	* Request Mapping

예시
GET /boards/list

Dispatcher Servlet이 처리해줌


----------------------------------------------------------------------------------------------------
정리(MVC 아키텍처)

브라우저는 요청/응답을 받는곳
(기존은 서블릿을 만들어서 여러개를 만든다.)

=> 이것을 스프링은 디스패터 서블릿이 처리한다.(프론트 컨트롤러)
=> 사용자는 ~컨트롤러 클래스를 만든다.(@애노테이션) => 리퀘스트 매핑을 만들고, 패스를 설정한다.
=> 매핑 정보를 만들어서 핸들러는  핸들러 매핑에 저장한다.(디스패터 서블릿을 이것을 찾는다.)
=> 핸들러 매핑이 알맞은 뷰 네임에 뷰객체를 만들어서 리턴하여 보낸다.(전략 객체)

=> Accept = text/html

-----------------------------------------------------------------------------------------------------
책 :
디스패처 서블릿
web.xml에 설정
	DispatcherServlet (path : /)
		-> 읽어들일 파일도 설정(xml or java config)
		-> 내부적으로 ApplicationContext를 가진다.
		-> 위의 ApplicationContext는 ContextLoaderListener의
			ApplicationContext를 부모로 가진다. (해당 빈을 부모부터 찾고 자식에서 찾게 된다.)
		-> 웹과 관련

	ContextLoaderListener
		-> 읽어들일 파일을 설정(xml or java config)
		-> 내부적으로 ApplicationContext를 가지고 있다.
		-> Service, Repository 등의 비지니스와 관련
		-> 컨트롤러라는 객체를 찾지 않음....(자식에서는 부모를 찾지만, 부모에서는 찾지 못한다.)

=> 웹과 웹이랑 관련되지않은 것을 관리하겠다는 이야기

=> 서블릿 3.0에서는 웹.xml 파일을 만들지 않아도 가능하다.

ServletContainerInitializer 설정
 => 구현하는 클래스를 작성하여 설정
 => web.xml을 찾고 없으면 구현하고 있는 클래스를 찾는다. (스프링 3.0 이상)
 => WebApplicationInitializer(스프링이 제공)을 구현

DispatherServlet

원래 /로 등록된 서블릿은 DefaultServlet이라고 했었다.
그런데 Spring MVC는 얀ㅔㅁㅅ촏ㄱㄴㄷㄱ핃ㅅdl rmrjtdmf tkdydgksek.
브라우저에서 GET /git.png 이런 요청이 왔는데, 이 정보가 HandlerMapping에 없다.
이이경우 404가 발생

break point